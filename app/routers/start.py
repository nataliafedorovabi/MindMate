from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from app.context import get_db
from app.keyboards import main_menu_kb
from app.keyboards.common import practice_actions_kb

router = Router(name="start")


@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    db = get_db()
    await db.upsert_user(message.from_user.id, message.from_user.first_name, message.from_user.username)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç—Ä–µ–Ω–∞–∂—ë—Ä –ø—Ä–∞–∫—Ç–∏–∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb(),
    )


@router.message(F.text == "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")
async def open_library(message: Message) -> None:
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É‚Ä¶ /library")


@router.message(F.text == "üìù –î–Ω–µ–≤–Ω–∏–∫")
async def open_journal(message: Message) -> None:
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –¥–Ω–µ–≤–Ω–∏–∫‚Ä¶ /journal")


@router.message(F.text == "‚úÖ –ß–µ–∫-–ª–∏—Å—Ç—ã")
async def open_checklists(message: Message) -> None:
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é —á–µ–∫-–ª–∏—Å—Ç—ã‚Ä¶ /checklists")


@router.message(F.text == "üé≤ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–Ω—è")
async def random_practice(message: Message) -> None:
    db = get_db()
    row = await db.random_practice()
    if not row:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫.")
        return
    await message.answer(format_practice(row), reply_markup=practice_actions_kb(int(row["id"])) )


def format_practice(row) -> str:
    import json

    steps = []
    if row["steps_json"]:
        try:
            steps = json.loads(row["steps_json"]) or []
        except Exception:
            steps = []
    steps_text = "\n".join([f"‚Ä¢ {s}" for s in steps]) if steps else ""
    desc = row["description"] or ""
    timer = row["timer_seconds"]
    timer_text = f"\n‚è±Ô∏è –¢–∞–π–º–µ—Ä: {timer} —Å–µ–∫." if timer else ""
    return f"<b>{row['title']}</b>\n\n{desc}\n\n{steps_text}{timer_text}"


