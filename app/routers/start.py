from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from app.context import get_db
from app.keyboards import main_menu_kb
from app.keyboards.common import practice_actions_kb, state_select_kb
from app.utils import format_practice

router = Router(name="start")


@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    db = get_db()
    await db.upsert_user(message.from_user.id, message.from_user.first_name, message.from_user.username)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø –ø–æ–º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ—Å—É—Ä—Å.\n–ö–∞–∫ —Ç–µ–±–µ —Å–µ–π—á–∞—Å?",
        reply_markup=state_select_kb(),
    )


@router.message(F.text == "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")
async def open_library(message: Message) -> None:
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É‚Ä¶ /library")


@router.message(F.text == "üåø –Ø –∑–¥–µ—Å—å")
async def open_journal(message: Message) -> None:
    await message.answer("–ö–∞–∫ —Ç–µ–±–µ —Å–µ–π—á–∞—Å?", reply_markup=state_select_kb())


@router.message(F.text == "‚úÖ –ß–µ–∫-–ª–∏—Å—Ç—ã")
async def open_checklists(message: Message) -> None:
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é —á–µ–∫-–ª–∏—Å—Ç—ã‚Ä¶ /checklists")


@router.message(F.text == "üåÖ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–Ω—è")
async def random_practice(message: Message) -> None:
    db = get_db()
    row = await db.random_practice()
    if not row:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫.")
        return
    await message.answer("üåÖ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–Ω—è\n\n" + format_practice(row), reply_markup=practice_actions_kb(int(row["id"])) )


@router.callback_query(F.data.startswith("st:"))
async def on_state_select(callback: 'CallbackQuery') -> None:
    from aiogram.types import CallbackQuery
    cb: CallbackQuery = callback
    code = cb.data.split(":",1)[1]
    # Simple mapping from state to preferred category
    mapping = {
        "angry": "attention",
        "confused": "mind",
        "strange": None,  # use custom guided flow
        "anxious": "attention",
        "sad": "emotion",
        "tired": "body",
        "calm": None,
    }
    db = get_db()
    pref = mapping.get(code)
    if code == "strange":
        from app.routers.state_strange import start_strange_flow
        await start_strange_flow(cb)
        return
    row = None
    if pref:
        # try category first
        import random
        practices = await db.list_practices_by_category(pref)
        if practices:
            import aiosqlite
            choice = random.choice(practices)
            row = await db.get_practice(int(choice["id"]))
    if row is None:
        row = await db.random_practice()
    if row:
        await cb.message.edit_text("–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Ç —ç—Ç–æ üëâ\n\n" + format_practice(row), reply_markup=practice_actions_kb(int(row["id"])) )
    await cb.answer()


    


